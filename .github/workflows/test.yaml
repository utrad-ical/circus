name: Test

on: [push]

jobs:
  check-versions:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 22.x
      - name: Log GITHUB_REF
        run: echo "GITHUB_REF $GITHUB_REF"
      - name: Check each package for changes and version updates
        run: |
          git fetch --tags
          TAGS=($(git tag --sort=-creatordate | head -n 2))
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            LAST_TAG=${TAGS[1]}
          else
            LAST_TAG=${TAGS[0]}
          fi
          echo "LAST_TAG determined: $LAST_TAG"
          if [[ -z "$LAST_TAG" ]]; then
            echo "No valid tag found for this push. Exiting..."
          else 
            git fetch --depth=1 origin $LAST_TAG
            CHANGED=false
            for PACKAGE in circus-api circus-cs-core circus-icons circus-lib circus-rs circus-ui-kit circus-web-ui create-circus-cad-plugin; do
              echo "Checking $PACKAGE..."
              if ! git diff --quiet $LAST_TAG HEAD -- packages/$PACKAGE; then
                echo "$PACKAGE has changes since $LAST_TAG."
                CURRENT_VERSION=$(node -p "require('./packages/$PACKAGE/package.json').version")
                PREVIOUS_VERSION=$(git show $LAST_TAG:./packages/$PACKAGE/package.json | node -e "let data=''; process.stdin.on('data', chunk => data += chunk); process.stdin.on('end', () => console.log(JSON.parse(data).version));")
                if [ "$CURRENT_VERSION" == "$PREVIOUS_VERSION" ]; then
                  echo "::error title=Package Version Not Updated::${PACKAGE} has changes but the version in package.json has not been updated."
                  CHANGED=true
                fi
              fi
            done
            if [ "$CHANGED" = true ]; then
              exit 1
            fi
          fi

  prettier-check:
    runs-on: ubuntu-latest
    env:
      NODE_VERSION: 22.x
    steps:
      - uses: actions/checkout@v3
      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Install dependencies
        run: npm ci
      - name: Run Prettier Check
        run: |
          npm run lint-prettier
          if [ $? -ne 0 ]; then
            echo "Prettier check failed."
            exit 1
          fi
      - name: Run ESlint
        run: |
          npm run lint
          if [ $? -ne 0 ]; then
            echo "ESlint failed."
            exit 1
          fi

  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
      fail-fast: false

    # services:
    #   mongodb:
    #     image: mongo:4.2.2-bionic
    #     ports:
    #       - 27017:27017

    steps:
      - uses: actions/checkout@v3
      - name: Start mongod
        shell: bash
        run: |
          docker run --name mongo -p 27017:27017 -d mongo:4.2.2-bionic --replSet replset
          sleep 5s
          docker exec mongo /bin/bash -c "echo \"rs.initiate();\" | mongo"
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install dependencies
        run: npm ci
      - name: Pull dicom_utility from Docker Hub
        run: |
          docker pull hello-world
          docker pull circuscad/dicom_utility:2.0.0-beta3
          docker pull circuscad/dicom_voxel_dump:1.0.0
          cd packages/circus-cs-core/test/docker
          node build.js
      - name: Build modules
        run: npm run build-ts
      - name: Run TypeScript Check
        run: |
          npm run typecheck
          if [ $? -ne 0 ]; then
            echo "TypeScript check failed."
            exit 1
          fi
      - name: Run test
        run: npm test -- --max-workers 1
        env:
          CI: true
          CIRCUS_MONGO_TEST_URL: 'mongodb://localhost:27017/circus-api-test'
      - name: Stop mongod
        if: always()
        run: |
          docker stop mongo
