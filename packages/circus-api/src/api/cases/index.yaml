name: Cases
description: >
  Manages CIRCUS DB cases.
routes:
  - verb: get
    path: /cases
    handler: handleSearch
    description: Performs search and retrieves a list of cases.
    responseSchema: clinicalCaseSearchResult|searchResult
  - verb: get
    path: /cases/list/:myListId
    handler: handleSearch
    description: Peforms search based on a my list ID.
    responseSchema: clinicalCaseSearchResult|searchResult
  - verb: post
    path: /cases
    # TODO: Security: Determine how to detect target project
    # requiredProjectPrivilege: write
    requestSchema: clinicalCaseCreate
    description: Creates a new case.
  - verb: get
    path: /cases/:caseId
    requiredProjectPrivilege: read
    description: Returns information about the specified case.
  - verb: post
    path: /cases/:caseId/revision
    requiredProjectPrivilege: write
    requestSchema: revision|allRequiredExcept date,creator
    handler: handlePostRevision
    description: Creates a new revision in the specified case.
  - verb: get
    path: /cases/:caseId/export-mhd
    requiredProjectPrivilege: read
    handler: handleExportAsMhd
    description: Exports the case data as MHD.
  - verb: put
    path: /cases/:caseId/tags
    requiredProjectPrivilege: write
    requestSchema:
      type: array
      items:
        type: string
    handler: handlePutTags
    description: Updates the tags of the specified case.
  - verb: patch
    path: /cases/tags
    handler: handlePatchTags
    requestSchema:
      type: object
      properties:
        operation:
          enum:
            - add
            - remove
            - set
        tags:
          type: array
          items:
            type: string
        caseIds:
          type: array
          items:
            type: string
          minItems: 1
      required: ['operation', 'tags', 'caseIds']
    description: Manages the tags of multiple cases.
