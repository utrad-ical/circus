'ure strict';

// Use `npm run fontgen` to invoke this script.

// The generated LESS and WOFF are meant to be commited to the
// repository, because the generated WOFF is small enough and
// will not change frequently.

const SVGIcons2SVGFontStream = require('svgicons2svgfont');
const svg2ttf = require('svg2ttf');
const ttf2woff = require('ttf2woff');
const glob = require('glob-promise');
const path = require('path');
const fs = require('fs');

const iconDirDb = path.join(__dirname, '../icons-db');
const iconDirRs = path.join(__dirname, '../icons-rs');
const distDir = path.join(__dirname, '../dist');

const create = async (iconPath, fontName, prefix) => {
  const files = await glob(path.join(iconPath, '*.svg'));
  const glyphs = [];
  let codepoint = 0xe600;

  files.sort();
  files.forEach(file => {
    const name = file.match(/([a-z-]+)\.svg/)[1].replace(/^-/, '');
    glyphs.push({
      file,
      name,
      codepoint: codepoint++
    });
  });
  console.log(glyphs);

  const makeSvg = glyphs => {
    let svgFont = Buffer.alloc(0);
    const svgOptions = {
      fontName,
      fontHeight: 512,
      descent: 73, // roughtly the same ratio used by Font Awesome
      log: () => {}
    };
    const fontStream = new SVGIcons2SVGFontStream(svgOptions)
      .on('data', data => {
        svgFont = Buffer.concat([svgFont, data]);
      })
      .on('end', () => {
        makeWoff(svgFont.toString(), glyphs);
      });

    glyphs.forEach(glyph => {
      const gfs = fs.createReadStream(glyph.file);
      const unicode = String.fromCharCode(glyph.codepoint);
      gfs.metadata = { name: glyph.name, unicode: [unicode] };
      fontStream.write(gfs);
    });
    fontStream.end();
  };

  const makeWoff = (svgFont, glyphs) => {
    const ttfBuf = svg2ttf(svgFont);
    const ttfFont = Buffer.from(ttfBuf.buffer);
    const woffBuf = ttf2woff(new Uint8Array(ttfFont));
    const woffFont = Buffer.from(woffBuf.buffer);
    fs.writeFileSync(path.resolve(distDir, `${fontName}.woff`), woffFont);

    const css =
      '/* Auto generated by fontgen.js */\n\n' +
      glyphs
        .map(g => {
          return `.${prefix}-${
            g.name
          }::before { content: '\\${g.codepoint.toString(16)}'; }`;
        })
        .join('\n');

    fs.writeFileSync(path.resolve(distDir, `${fontName}-glyphs.css`), css);
    fs.writeFileSync(path.resolve(distDir, `${fontName}-glyphs.less`), css);
  };

  makeSvg(glyphs, fontName, prefix);
};

const main = async () => {
  await create(iconDirDb, 'circus-db-font', 'circus-icon');
  await create(iconDirRs, 'circus-rs-font', 'rs-icon');
};

main();
