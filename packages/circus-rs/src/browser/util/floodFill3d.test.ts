import { Vector3, Box3 } from 'three';
import createMarkedStateDumper from './createMarkedStateDumper';
import floodFill3d from './floodFill3d';
import voxelMarker from './voxelMarker';

describe('floodFill3d with binarizer that always returns ture', () => {
  const runFrom = (x: number, y: number, z: number, expectedFilled = true) => {
    const startPoint = new Vector3(x, y, z);

    const { fillLine, dump } = createUniverse();

    const boundaryOffsetBox = new Box3().setFromArray([3, 3, 3, 6, 6, 6]); // has 64 voxels
    const binarizer = (_p: Vector3) => true;

    const report = withReport()(floodFill3d)(
      startPoint,
      boundaryOffsetBox,
      binarizer,
      fillLine
    );
    const result = dump();
    // console.log(report);
    // console.log(result);
    if (expectedFilled) {
      expect(result.replace(/\s+/g, '')).toBe(
        expectedResult.replace(/\s+/g, '')
      );
      expect(report.targetVoxels).toBe(64);
      expect(report.matchedVoxels).toBe(64);
    } else {
      expect(report.targetVoxels).toBe(64);
      expect(report.matchedVoxels).toBe(0);
    }
  };
  const expectedResult = `
    x: 0 - 9
         |[0]       |[1]       |[2]       |[3]       |[4]       |[5]       |[6]       |[7]       |[8]       |[9]       |
        0|----------|----------|----------|----------|----------|----------|----------|----------|----------|----------|
        1|----------|----------|----------|----------|----------|----------|----------|----------|----------|----------|
        2|----------|----------|----------|----------|----------|----------|----------|----------|----------|----------|
        3|----------|----------|----------|---****---|---****---|---****---|---****---|----------|----------|----------|
        4|----------|----------|----------|---****---|---****---|---****---|---****---|----------|----------|----------|
        5|----------|----------|----------|---****---|---****---|---****---|---****---|----------|----------|----------|
        6|----------|----------|----------|---****---|---****---|---****---|---****---|----------|----------|----------|
        7|----------|----------|----------|----------|----------|----------|----------|----------|----------|----------|
        8|----------|----------|----------|----------|----------|----------|----------|----------|----------|----------|
        9|----------|----------|----------|----------|----------|----------|----------|----------|----------|----------|
  `;
  test('must fill all voxels in specified box if start from the center', () =>
    runFrom(5, 5, 5));
  test('must fill all voxels in specified box if start from the min offset', () =>
    runFrom(3, 3, 3));
  test('must fill all voxels in specified box if start from the max offset', () =>
    runFrom(6, 6, 6));
  test('must not fill nowhere if start from the over the max of the box', () =>
    runFrom(7, 6, 6, false));
  test('must not fill nowhere if start from the under the min of the box', () =>
    runFrom(3, 3, 2, false));
});

describe('floodFill3d with gourd-shaped binarizer', () => {
  test('must fill correctly', () => {
    const expectedResult = `
    x: 0 - 12
         |[0]          |[1]          |[2]          |[3]          |[4]          |[5]          |[6]          |[7]          |[8]          |[9]          |
        0|-------------|-------------|-------------|---*---------|-------------|-------------|-------------|-------------|-------------|-------------|
        1|-------------|--***--------|-*****-------|-*****-------|-*****-------|--***--------|-------------|-------------|-------------|-------------|
        2|-------------|-*****-------|-*****-------|-*****-------|-*****-------|-*****-------|-------------|-------------|-------------|-------------|
        3|---*---------|-*****-------|-*****-------|*******------|-*****-------|-*****-------|---*---------|-------*-----|-------------|-------------|
        4|-------------|-*****-------|-*****-------|-*****-------|-*****-------|-********----|-----*****---|-----*****---|-----*****---|------***----|
        5|-------------|--***--------|-*****-------|-*****-------|-********----|--********---|----*******--|----*******--|----*******--|-----*****---|
        6|-------------|-------------|-------------|---*---------|-----*****---|----*******--|----*******--|----*******--|----*******--|----*******--|
        7|-------------|-------------|-------------|-------*-----|-----*****---|----*******--|----*******--|---*********-|----*******--|----*******--|
        8|-------------|-------------|-------------|-------------|-----*****---|----*******--|----*******--|----*******--|----*******--|----*******--|
        9|-------------|-------------|-------------|-------------|------***----|-----*****---|----*******--|----*******--|----*******--|-----*****---|
       10|-------------|-------------|-------------|-------------|-------------|------***----|-----*****---|-----*****---|-----*****---|------***----|
       11|-------------|-------------|-------------|-------------|-------------|-------------|-------------|-------*-----|-------------|-------------|
    `;
    const gourdShapedBinarizer = createDualBallShapedBinarizer(
      [3, 3, 3],
      3,
      [7, 7, 7],
      4
    );
    const { fillLine, dump } = createUniverse(12, 11, 9);
    const startPoint = new Vector3(3, 3, 3);
    const boundaryOffsetBox = new Box3().setFromArray([0, 0, 0, 12, 11, 9]); // the size is same as universe
    const report = withReport()(floodFill3d)(
      startPoint,
      boundaryOffsetBox,
      gourdShapedBinarizer,
      fillLine
    );
    const result = dump();
    // console.log(report);
    // console.log(result);
    expect(result.replace(/\s+/g, '')).toBe(expectedResult.replace(/\s+/g, ''));
  });
  test('must not fill anywhere if the start point does not satisfy the condition', () => {
    const gourdShapedBinarizer = createDualBallShapedBinarizer(
      [3, 3, 3],
      3,
      [7, 7, 7],
      4
    );
    const { fillLine, dump } = createUniverse(12, 11, 9);
    const startPoint = new Vector3(2, 6, 3);
    const boundaryOffsetBox = new Box3().setFromArray([0, 0, 0, 12, 11, 9]); // the size is same as universe
    const report = withReport()(floodFill3d)(
      startPoint,
      boundaryOffsetBox,
      gourdShapedBinarizer,
      fillLine
    );
    expect(report.matchedVoxels).toBe(0);
  });
});

describe('floodFill3d with separated 2 balls binarizer', () => {
  test('must fill two balls by 2 calls and does not reference each diagonal direction', () => {
    const expectedResult1 = `
    x: 0 - 15
         |[0]             |[1]             |[2]             |[3]             |[4]             |[5]             |[6]             |[7]             |[8]             |[9]             |[10]            |[11]            |[12]            |[13]            |[14]            |[15]            |
        0|----------------|----------------|----------------|----------------|----------------|----------------|------*---------|----------------|----------------|----------------|----------------|----------------|----------------|----------------|----------------|----------------|
        1|----------------|----------------|----------------|-----***--------|----*****-------|---*******------|---*******------|---*******------|----*****-------|-----***--------|----------------|----------------|----------------|----------------|----------------|----------------|
        2|----------------|----------------|----*****-------|---*******------|--*********-----|--*********-----|--*********-----|--*********-----|--*********-----|---*******------|----*****-------|----------------|----------------|----------------|----------------|----------------|
        3|----------------|-----***--------|---*******------|--*********-----|--*********-----|-***********----|-***********----|-***********----|--*********-----|--*********-----|---*******------|-----***--------|----------------|----------------|----------------|----------------|
        4|----------------|----*****-------|--*********-----|--*********-----|-***********----|-***********----|-***********----|-***********----|-***********----|--*********-----|--*********-----|----*****-------|----------------|----------------|----------------|----------------|
        5|----------------|---*******------|--*********-----|-***********----|-***********----|-***********----|-***********----|-***********----|-***********----|-***********----|--*********-----|---*******------|----------------|----------------|----------------|----------------|
        6|------*---------|---*******------|--*********-----|-***********----|-***********----|-***********----|*************---|-***********----|-***********----|-***********----|--*********-----|---*******------|------*---------|----------------|----------------|----------------|
        7|----------------|---*******------|--*********-----|-***********----|-***********----|-***********----|-***********----|-***********----|-***********----|-***********----|--*********-----|---*******------|----------------|----------------|----------------|----------------|
        8|----------------|----*****-------|--*********-----|--*********-----|-***********----|-***********----|-***********----|-***********----|-***********----|--*********-----|--*********-----|----*****-------|----------------|----------------|----------------|----------------|
        9|----------------|-----***--------|---*******------|--*********-----|--*********-----|-***********----|-***********----|-***********----|--*********-----|--*********-----|---*******------|-----***--------|----------------|----------------|----------------|----------------|
       10|----------------|----------------|----*****-------|---*******------|--*********-----|--*********-----|--*********-----|--*********-----|--*********-----|---*******------|----*****-------|----------------|----------------|----------------|----------------|----------------|
       11|----------------|----------------|----------------|-----***--------|----*****-------|---*******------|---*******------|---*******------|----*****-------|-----***--------|----------------|----------------|----------------|----------------|----------------|----------------|
       12|----------------|----------------|----------------|----------------|----------------|----------------|------*---------|----------------|----------------|----------------|----------------|----------------|----------------|----------------|----------------|----------------|
       13|----------------|----------------|----------------|----------------|----------------|----------------|----------------|----------------|----------------|----------------|----------------|----------------|----------------|----------------|----------------|----------------|
       14|----------------|----------------|----------------|----------------|----------------|----------------|----------------|----------------|----------------|----------------|----------------|----------------|----------------|----------------|----------------|----------------|
       15|----------------|----------------|----------------|----------------|----------------|----------------|----------------|----------------|----------------|----------------|----------------|----------------|----------------|----------------|----------------|----------------|
    `;
    const expectedResult2 = `
    x: 0 - 15
         |[0]             |[1]             |[2]             |[3]             |[4]             |[5]             |[6]             |[7]             |[8]             |[9]             |[10]            |[11]            |[12]            |[13]            |[14]            |[15]            |
        0|----------------|----------------|----------------|----------------|----------------|----------------|------*---------|----------------|----------------|----------------|----------------|----------------|----------------|----------------|----------------|----------------|
        1|----------------|----------------|----------------|-----***--------|----*****-------|---*******------|---*******------|---*******------|----*****-------|-----***--------|----------------|----------------|----------------|----------------|----------------|----------------|
        2|----------------|----------------|----*****-------|---*******------|--*********-----|--*********-----|--*********-----|--*********-----|--*********-----|---*******------|----*****-------|----------------|----------------|----------------|----------------|----------------|
        3|----------------|-----***--------|---*******------|--*********-----|--*********-----|-***********----|-***********----|-***********----|--*********-----|--*********-----|---*******------|-----***--------|----------------|----------------|----------------|----------------|
        4|----------------|----*****-------|--*********-----|--*********-----|-***********----|-***********----|-***********----|-***********----|-***********----|--*********-----|--*********-----|----*****-------|----------------|----------------|----------------|----------------|
        5|----------------|---*******------|--*********-----|-***********----|-***********----|-***********----|-***********----|-***********----|-***********----|-***********----|--*********-----|---*******------|----------------|----------------|----------------|----------------|
        6|------*---------|---*******------|--*********-----|-***********----|-***********----|-***********----|*************---|-***********----|-***********----|-***********----|--*********-----|---*******------|------*---------|----------------|----------------|----------------|
        7|----------------|---*******------|--*********-----|-***********----|-***********----|-***********----|-***********----|-***********----|-***********----|-***********----|--*********-----|---*******------|----------------|----------------|-------------*--|----------------|
        8|----------------|----*****-------|--*********-----|--*********-----|-***********----|-***********----|-***********----|-***********----|-***********----|--*********-----|--*********-----|----*****---***-|-----------*****|----------******|----------******|----------******|
        9|----------------|-----***--------|---*******------|--*********-----|--*********-----|-***********----|-***********----|-***********----|--*********-----|--*********-----|---*******-*****|-----***--******|---------*******|---------*******|---------*******|---------*******|
       10|----------------|----------------|----*****-------|---*******------|--*********-----|--*********-----|--*********-----|--*********-----|--*********-----|---*******--***-|----*****-******|---------*******|---------*******|--------********|--------********|--------********|
       11|----------------|----------------|----------------|-----***--------|----*****-------|---*******------|---*******------|---*******------|----*****-------|-----***---*****|---------*******|---------*******|--------********|--------********|--------********|--------********|
       12|----------------|----------------|----------------|----------------|----------------|----------------|------*---------|----------------|----------------|----------******|---------*******|--------********|--------********|--------********|--------********|--------********|
       13|----------------|----------------|----------------|----------------|----------------|----------------|----------------|----------------|-------------*--|----------******|---------*******|--------********|--------********|--------********|-------*********|--------********|
       14|----------------|----------------|----------------|----------------|----------------|----------------|----------------|----------------|----------------|----------******|---------*******|--------********|--------********|--------********|--------********|--------********|
       15|----------------|----------------|----------------|----------------|----------------|----------------|----------------|----------------|----------------|-----------*****|---------*******|---------*******|--------********|--------********|--------********|--------********|
    `;
    const expectedClosestZoom1 = `
    x: 0 - 15
         |[9]             |[10]            |[11]            |
        7|-***********----|--*********-----|---*******------|
        8|--*********-----|--*********-----|----*****-------|
        9|--*********-----|---*******------|-----***--------|
       10|---*******------|----*****-------|----------------|
       11|-----***--------|----------------|----------------|
       12|----------------|----------------|----------------|
    `;
    const expectedClosestZoom2 = `
    x: 0 - 15
         |[9]             |[10]            |[11]            |
        7|-***********----|--*********-----|---*******------|
        8|--*********-----|--*********-----|----*****---***-|
        9|--*********-----|---*******-*****|-----***--******|
       10|---*******--***-|----*****-******|---------*******|
       11|-----***---*****|---------*******|---------*******|
       12|----------******|---------*******|--------********|
    `;
    const separated2BallsBinarizer = createDualBallShapedBinarizer(
      [6, 6, 6],
      6,
      [13, 13, 14],
      6
    );
    const { fillLine, dump, dumper } = createUniverse(15, 15, 15);
    const boundaryOffsetBox = new Box3().setFromArray([0, 0, 0, 15, 15, 15]); // the size is same as universe
    const fill = floodFill3d;
    fill(
      new Vector3(6, 6, 6),
      boundaryOffsetBox,
      separated2BallsBinarizer,
      fillLine
    );
    const result1 = dump();
    const closestZoom1 = dumper(new Box3().setFromArray([0, 7, 9, 15, 12, 11]));
    // console.log(result1);
    // console.log(closestZoom1);
    expect(result1.replace(/\s+/g, '')).toBe(
      expectedResult1.replace(/\s+/g, '')
    );
    expect(closestZoom1.replace(/\s+/g, '')).toBe(
      expectedClosestZoom1.replace(/\s+/g, '')
    );

    fill(
      new Vector3(14, 14, 14),
      boundaryOffsetBox,
      separated2BallsBinarizer,
      fillLine
    );
    const result2 = dump();
    const closestZoom2 = dumper(new Box3().setFromArray([0, 7, 9, 15, 12, 11]));
    // console.log(result2);
    // console.log(closestZoom2);
    expect(result2.replace(/\s+/g, '')).toBe(
      expectedResult2.replace(/\s+/g, '')
    );
    expect(closestZoom2.replace(/\s+/g, '')).toBe(
      expectedClosestZoom2.replace(/\s+/g, '')
    );
  });
});

test.skip('floodFill3d must work enough speedy', () => {
  const bigGourdShapedBinarizer = createDualBallShapedBinarizer(
    [120, 120, 120],
    120,
    [240, 240, 240],
    120
  );
  const { fillLine } = createUniverse(300, 300, 300);
  const boundaryOffsetBox = new Box3().setFromArray([0, 0, 0, 300, 300, 300]); // the size is same as universe
  const report = withReport()(floodFill3d)(
    new Vector3(240, 240, 240),
    boundaryOffsetBox,
    bigGourdShapedBinarizer,
    fillLine
  );

  expect(report.procTime).toBeLessThan(1500);
});

function withReport() {
  return (enhanced: typeof floodFill3d) => (
    startPoint: Vector3,
    offsetBox: Box3,
    binarizer: (p: Vector3) => boolean,
    origFillLine: (p1: Vector3, p2: Vector3) => void
  ) => {
    const report = {
      targetVoxels:
        (offsetBox.max.x - offsetBox.min.x + 1) *
        (offsetBox.max.y - offsetBox.min.y + 1) *
        (offsetBox.max.z - offsetBox.min.z + 1),
      matchedVoxels: 0,
      matchedRate: 0.0,
      fillLineCalled: 0,
      // maxStackLength: 0, // cannot get
      procTime: 0
    };

    const fillLine = (p1: Vector3, p2: Vector3) => {
      report.fillLineCalled++;
      report.matchedVoxels += p2.x - p1.x + 1;
      origFillLine(p1, p2);
    };

    const t0 = new Date().getTime();
    enhanced(startPoint, offsetBox, binarizer, fillLine);
    report.procTime = new Date().getTime() - t0;
    report.matchedRate =
      Math.round((report.matchedVoxels / report.targetVoxels) * 10000) / 100;
    return report;
  };
}
const createDualBallShapedBinarizer = (
  [c1x, c1y, c1z]: [number, number, number],
  r1: number,
  [c2x, c2y, c2z]: [number, number, number],
  r2: number
) => (p: Vector3) =>
  !!(
    (p.x - c1x) ** 2 + (p.y - c1y) ** 2 + (p.z - c1z) ** 2 <= r1 ** 2 ||
    (p.x - c2x) ** 2 + (p.y - c2y) ** 2 + (p.z - c2z) ** 2 <= r2 ** 2
  );

const createUniverse = (w: number = 9, h: number = 9, d: number = 9) => {
  const universeBox = new Box3().setFromArray([0, 0, 0, w, h, d]); // has 1000 voxels if w=9,h=9,d=9
  const marker = voxelMarker(universeBox);
  const dumper = createMarkedStateDumper(marker.marked);
  return {
    fillLine: (p1: Vector3, p2: Vector3) => marker.marks(p1, p2.x),
    dump: () => dumper(universeBox),
    dumper
  };
};
