<?php

/**
 * Manager for CIRCUS RS system.
 */
class RsManager
{
	protected $rs_dir;

	public function __construct()
	{
		$this->rs_dir = realpath(app_path() . '/../vendor/utrad-ical/circus-rs');
	}

	public function getRsDir()
	{
		return $this->rs_dir;
	}

	public function checkForever()
	{
		if (!is_dir($this->rs_dir)) {
			return 'Error: CIRCUS RS package is not installed using Composer.';
		}
		if (!is_file($this->rs_dir . '/node_modules/.bin/forever')) {
			return 'Error: CIRCUS RS package is installed, but building process is not complete.' . $this->script;
		}
		if (!is_file($this->rs_dir . '/circus-rs.js')) {
			return 'Error: CIRCUS RS package is installed, but building process is not complete. (forever missing)';
		}
		return true;
	}

	protected function makeConfig()
	{
		$ext = PHP_OS == 'WINNT' ? '.exe' : '';
		$dumperPath = realpath(app_path() . '/bin/dicom_voxel_dump' . $ext);
		Log::info($dumperPath);
		$data = [
			'pathResolver' => [
				'module' => 'CircusDbPathResolver',
				'options' => [ 'configPath' => realpath(app_path() . '/config/db_config.json') ]
			],
			'dumper' => [
				'module' =>  "DicomVoxelDumperAdapter",
				'options' => [ 'dumper' => $dumperPath ]
			],
			'logs' => [[
				'type' => 'dateFile',
				'filename' => storage_path('logs/circus-rs.log'),
				'pattern' => '-yyyyMMdd.log'
			]],
			'authorization' => ['require' => true]
		];
		$confFileName = $this->rs_dir . '/config/local.json';
		$content = "// Automatically generated by CIRCUS DB\n" . json_encode($data, JSON_PRETTY_PRINT);
		file_put_contents($confFileName, $content);
		return $confFileName;
	}

	protected function exec($command, $script = '')
	{
		$forever_root = storage_path('forever');
		putenv('FOREVER_ROOT=' . $forever_root);
		chdir($this->rs_dir);
		$script = $script ? " " . escapeshellarg($script) : '';
		$d = DIRECTORY_SEPARATOR;
		$com = ".{$d}node_modules{$d}.bin{$d}forever $command --plain$script";
		exec($com, $out, $retvar);
		return implode("\n", $out);
	}

	public function status()
	{
		if (($error = $this->checkForever()) !== true) {
			return $error;
		}
		return $this->exec('list');
	}

	public function start()
	{
		if (($error = $this->checkForever()) !== true) {
			return $error;
		}
		$this->makeConfig();
		$this->exec('start', 'circus-rs.js');
		return $this->exec('list');
	}

	public function stop()
	{
		if (($error = $this->checkForever()) !== true) {
			return $error;
		}
		$this->exec('stop', 'circus-rs.js');
		return $this->exec('list');
	}

}
